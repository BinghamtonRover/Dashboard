# Lint rules for all Dart/Flutter projects used by BURT.
# 
# Each lint is either enabled or disabled (commented out), with an explanation of what it does or 
# why it's enabled/disabled. There is also a link to the official docs for that lint which explain
# what it does and why it matters. 
# 
# Note that some of these lints contradict each other or the Effective Dart style guide. 

# Rules are in the same order (alphabetically) as documented at http://dart-lang.github.io/linter/lints
# and https://github.com/dart-lang/linter/blob/master/example/all.yaml
linter:
  rules:
    # Prevents accidental return type changes which results in a breaking API change.
    # Enforcing return type makes API changes visible in a diff
    # http://dart-lang.github.io/linter/lints/always_declare_return_types.html
    - always_declare_return_types

    # Single line `if`s are fine as recommended in Effective Dart "DO format your code using dartfmt"
    # http://dart-lang.github.io/linter/lints/always_put_control_body_on_new_line.html
    # - always_put_control_body_on_new_line

    # Helps readers easily find the required parameters first 
    # http://dart-lang.github.io/linter/lints/always_declare_return_types.html
    - always_put_required_named_parameters_first

    # All non nullable named parameters should be and annotated with @required.
    # This allows API consumers to get warnings via lint rather than a crash a runtime.
    # Might become obsolete with Non-Nullable types
    # http://dart-lang.github.io/linter/lints/always_require_non_null_named_parameters.html
    - always_require_non_null_named_parameters

    # Since dart 2.0 dart is a sound language, specifying types is not required anymore.
    # `var foo = 10;` is enough information for the compiler to make foo a int.
    # Violates Effective Dart "AVOID type annotating initialized local variables".
    # Makes code unnecessarily complex https://github.com/dart-lang/linter/issues/1620
    # http://dart-lang.github.io/linter/lints/always_specify_types.html
    # - always_specify_types
    # More importantly, it forces types on literals, like <int>[1, 2, 3]

    # Protect against unintentionally overriding superclass members
    # http://dart-lang.github.io/linter/lints/annotate_overrides.html
    - annotate_overrides

    # All methods should define a return type. dynamic is no exception.
    # Violates Effective Dart "PREFER annotating with dynamic instead of letting inference fail"
    # http://dart-lang.github.io/linter/lints/avoid_annotating_with_dynamic.html
    # - avoid_annotating_with_dynamic

    # A leftover from dart1, should be deprecated
    # - https://github.com/dart-lang/linter/issues/1401
    # http://dart-lang.github.io/linter/lints/avoid_as.html
    # - avoid_as

    # Highlights boolean expressions which can be simplified
    # http://dart-lang.github.io/linter/lints/avoid_bool_literals_in_conditional_expressions.html
    - avoid_bool_literals_in_conditional_expressions

    # There are no strong arguments to enable this rule because it is very strict. Catching anything is useful
    # and common even if not always the most correct thing to do.
    # http://dart-lang.github.io/linter/lints/avoid_catches_without_on_clauses.html
    # - avoid_catches_without_on_clauses

    # Errors aren't for catching but to prevent prior to runtime. Catch *exceptions* instead.  
    # http://dart-lang.github.io/linter/lints/avoid_catching_errors.html
    - avoid_catching_errors

    # Can usually be replaced with an extension, or importing the file with a prefix.
    # http://dart-lang.github.io/linter/lints/avoid_classes_with_only_static_members.html
    - avoid_classes_with_only_static_members

    # Never accidentally use dynamic invocations
    # Dart SDK: unreleased • (Linter vnull)
    # https://dart-lang.github.io/linter/lints/avoid_dynamic_calls.html
    # avoid_dynamic_calls

    # Only useful when targeting JS
    # http://dart-lang.github.io/linter/lints/avoid_double_and_int_checks.html
    # - avoid_double_and_int_checks

    # Prevents accidental empty else cases. See samples in documentation
    # http://dart-lang.github.io/linter/lints/avoid_empty_else.html
    - avoid_empty_else

    # It is expected that mutable objects which override hash & equals shouldn't be used as keys for hashmaps.
    # This one use case doesn't make all hash & equals implementations for mutable classes bad.
    # https://dart-lang.github.io/linter/lints/avoid_equals_and_hash_code_on_mutable_classes.html
    # - avoid_equals_and_hash_code_on_mutable_classes

    # Use different quotes instead of escaping
    # Dart SDK: >= 2.8.0-dev.11.0 • (Linter v0.1.111)
    # https://dart-lang.github.io/linter/lints/avoid_escaping_inner_quotes.html
    - avoid_escaping_inner_quotes

    # Prevents unnecessary allocation of a field
    # http://dart-lang.github.io/linter/lints/avoid_field_initializers_in_const_classes.html
    - avoid_field_initializers_in_const_classes

    # Prevents allocating a lambda and allows return/break/continue control flow statements inside the loop
    # http://dart-lang.github.io/linter/lints/avoid_function_literals_in_foreach_calls.html
    - avoid_function_literals_in_foreach_calls

    # Don't break value types by implementing them
    # http://dart-lang.github.io/linter/lints/avoid_implementing_value_types.html
    - avoid_implementing_value_types

    # Removes redundant `= null;`
    # https://dart-lang.github.io/linter/lints/avoid_init_to_null.html
    - avoid_init_to_null

    # Only useful when targeting JS
    # Warns about too large integers when compiling to JS
    # https://dart-lang.github.io/linter/lints/avoid_js_rounded_ints.html
    # - avoid_js_rounded_ints

    # Null checks aren't required in ==() operators
    # https://dart-lang.github.io/linter/lints/avoid_null_checks_in_equality_operators.html
    - avoid_null_checks_in_equality_operators

    # Good APIs don't use ambiguous boolean parameters. Instead use named parameters
    # https://dart-lang.github.io/linter/lints/avoid_positional_boolean_parameters.html
    - avoid_positional_boolean_parameters

    # Don't call print in production code
    # https://dart-lang.github.io/linter/lints/avoid_print.html
    - avoid_print

    # Always prefer function references over typedefs.
    # Jumping twice in code to see the signature of a lambda sucks. This is different from the flutter analysis_options
    # https://dart-lang.github.io/linter/lints/avoid_private_typedef_functions.html
    - avoid_private_typedef_functions

    # Don't explicitly set arguments to the function's default value
    # Dart SDK: >= 2.8.0-dev.1.0 • (Linter v0.1.107)
    # https://dart-lang.github.io/linter/lints/avoid_redundant_argument_values.html
    - avoid_redundant_argument_values

    # package or relative? Let's end the discussion and use package everywhere.
    # https://dart-lang.github.io/linter/lints/avoid_relative_lib_imports.html
    - avoid_relative_lib_imports

    # Keeping the parameter name consistent helps readers interpret their purpose. 
    # https://dart-lang.github.io/linter/lints/avoid_renaming_method_parameters.html
    - avoid_renaming_method_parameters

    # Setters always return void, therefore defining void is redundant
    # https://dart-lang.github.io/linter/lints/avoid_return_types_on_setters.html
    - avoid_return_types_on_setters

    # Non-nullable types will ensure any null-related errors are caught at compile-time. 
    # There are plenty of valid reasons to return null.
    # https://dart-lang.github.io/linter/lints/avoid_returning_null.html
    # - avoid_returning_null

    # Don't use `Future?`, therefore never return null instead of a Future.
    # Will become obsolete one Non-Nullable types land
    # https://dart-lang.github.io/linter/lints/avoid_returning_null_for_future.html
    - avoid_returning_null_for_future

    # When a function is marked void, it shouldn't return _anything_. 
    # Returning null is technically okay, but stylistically misleading. 
    # https://dart-lang.github.io/linter/lints/avoid_returning_null_for_void.html
    - avoid_returning_null_for_void

    # If someone calls a method on an object, they clearly have access to the object.
    # Returning the same object doesn't indicate anything about the result of the method.
    # https://dart-lang.github.io/linter/lints/avoid_returning_this.html
    - avoid_returning_this

    # Prevents logical inconsistencies. It's good practice to define getters for all existing setters.
    # For write-only values, use a method like `.setVar(value)`.
    # https://dart-lang.github.io/linter/lints/avoid_setters_without_getters.html
    - avoid_setters_without_getters

    # Don't reuse a type parameter when on with the same name already exists in the same scope
    # https://dart-lang.github.io/linter/lints/avoid_shadowing_type_parameters.html
    - avoid_shadowing_type_parameters

    # A single cascade operator can be replaced with a normal method call
    # https://dart-lang.github.io/linter/lints/avoid_single_cascade_in_expression_statements.html
    - avoid_single_cascade_in_expression_statements

    # IO is unpredictable, and async helps keep that lag in the background. 
    # Even if in some cases these IO functions are slower, it's still worth it to keep them async. 
    # https://dart-lang.github.io/linter/lints/avoid_slow_async_io.html
    # - avoid_slow_async_io

    # Don't use .toString() in production code which might be minified
    # Dart SDK: >= 2.10.0-144.0.dev • (Linter v0.1.119)
    # https://dart-lang.github.io/linter/lints/avoid_type_to_string.html
    - avoid_type_to_string

    # Don't use a parameter name which can be confused with a types (i.e. int, bool, num, ...)
    # https://dart-lang.github.io/linter/lints/avoid_types_as_parameter_names.html
    - avoid_types_as_parameter_names

    # Adding the type is not required, but sometimes improves readability.
    # https://dart-lang.github.io/linter/lints/avoid_types_on_closure_parameters.html
    # - avoid_types_on_closure_parameters

    # Containers without parameters have no effect and can be removed
    # https://dart-lang.github.io/linter/lints/avoid_unnecessary_containers.html
    - avoid_unnecessary_containers

    # Unused parameters should be removed
    # https://dart-lang.github.io/linter/lints/avoid_unused_constructor_parameters.html
    - avoid_unused_constructor_parameters

    # Having an async function return `Future` allows callers to use `await` on it. 
    # Even if you don't think an async function should be awaited, still give them the choice. 
    # If the function returns no value, use `Future<void>`. 
    # https://dart-lang.github.io/linter/lints/avoid_void_async.html
    - avoid_void_async

    # Flutter mobile only: Web packages aren't available in mobile flutter apps
    # https://dart-lang.github.io/linter/lints/avoid_web_libraries_in_flutter.html
    - avoid_web_libraries_in_flutter

    # Use the await keyword only for futures. There is nothing to await in synchronous code
    # https://dart-lang.github.io/linter/lints/await_only_futures.html
    - await_only_futures

    # Follow the style guide and use UpperCamelCase for extensions
    # https://dart-lang.github.io/linter/lints/camel_case_extensions.html
    - camel_case_extensions

    # Follow the style guide and use UpperCamelCase for class names and typedefs
    # https://dart-lang.github.io/linter/lints/camel_case_types.html
    - camel_case_types

    # Prevents leaks and code executing after their lifecycle.
    # Discussion https://github.com/passsy/dart-lint/issues/4
    #
    # https://dart-lang.github.io/linter/lints/cancel_subscriptions.html
    - cancel_subscriptions

    # IMO, the cascade syntax is only useful after >3 method calls. 
    # https://dart-lang.github.io/linter/lints/cascade_invocations.html
    # - cascade_invocations

    # Don't cast T? to T. Use ! instead
    # Dart SDK: >= 2.11.0-182.0.dev • (Linter v0.1.120)
    # https://dart-lang.github.io/linter/lints/cast_nullable_to_non_nullable.html
    - cast_nullable_to_non_nullable

    # False positives, not reliable enough. See https://github.com/dart-lang/linter/issues/1381
    # https://dart-lang.github.io/linter/lints/close_sinks.html
    # - close_sinks

    # Doc comments can contain references to other code using [brackets]. 
    # This lint will warn when the code referenced doesn't actually exist. 
    # https://dart-lang.github.io/linter/lints/comment_references.html
    - comment_references

    # Follow standard dart naming style.
    # https://dart-lang.github.io/linter/lints/constant_identifier_names.html
    - constant_identifier_names

    # Prevents hard to debug code
    # https://dart-lang.github.io/linter/lints/control_flow_in_finally.html
    - control_flow_in_finally

    # Single line `if`s are fine, but when a new line splits the bool expression and body curly braces
    # are recommended. It prevents the danging else problem and easily allows the addition of more lines inside
    # the if body
    # https://dart-lang.github.io/linter/lints/curly_braces_in_flow_control_structures.html
    - curly_braces_in_flow_control_structures

    # Still experimental and pretty much work when enforced
    # https://dart-lang.github.io/linter/lints/diagnostic_describe_all_properties.html
    # - diagnostic_describe_all_properties

    # Follows dart style. Fully supported by IDEs and no manual effort for a consistent style
    # https://dart-lang.github.io/linter/lints/directives_ordering.html
    - directives_ordering

    # Using environment variables obscures platform-specific bugs
    # Dart SDK: >= 2.10.0-0.0.dev • (Linter v0.1.117)
    # https://dart-lang.github.io/linter/lints/do_not_use_environment.html
    - do_not_use_environment

    # Runtime errors mean something is wrong. Do not ignore them.
    # https://dart-lang.github.io/linter/lints/empty_catches.html
    - empty_catches

    # Replace empty constructor bodies with a semicolon
    # https://dart-lang.github.io/linter/lints/empty_constructor_bodies.html
    - empty_constructor_bodies

    # Don't allow empty if bodies. Works together with curly_braces_in_flow_control_structures
    # https://dart-lang.github.io/linter/lints/empty_statements.html
    - empty_statements

    # Makes sure switch statements have a case for all possibilities. 
    # https://dart-lang.github.io/linter/lints/exhaustive_cases.html
    - exhaustive_cases

    # Follow dart file naming schema
    # https://dart-lang.github.io/linter/lints/file_names.html
    - file_names

    # Very flutter specific, not applicable for all projects
    # https://dart-lang.github.io/linter/lints/flutter_style_todos.html
    # - flutter_style_todos

    # hashCode and equals need to be consistent. One can't live without another.
    # https://dart-lang.github.io/linter/lints/hash_and_equals.html
    - hash_and_equals

    # Files under lib/src are considered private and can change at any time. 
    # Public code is exported in libraries directly under lib/
    # https://dart-lang.github.io/linter/lints/implementation_imports.html
    - implementation_imports

    # This lint catches conditions that are always true or false, and are thus unnecessary.
    # https://dart-lang.github.io/linter/lints/invariant_booleans.html
    - invariant_booleans

    # Type check for Iterable<T>.contains(other) where other is! T
    # otherwise contains will always report false. Those errors are usually very hard to catch.
    # https://dart-lang.github.io/linter/lints/iterable_contains_unrelated_type.html
    - iterable_contains_unrelated_type

    # Instead of allocating a variable and returning it, simply return the value. 
    # https://dart-lang.github.io/linter/lints/join_return_with_assignment.html
    - join_return_with_assignment

    # Add a leading newline which which makes multiline strings easier to read
    # Dart SDK: >= 2.8.0-dev.16.0 • (Linter v0.1.113)
    # https://dart-lang.github.io/linter/lints/leading_newlines_in_multiline_strings.html
    - leading_newlines_in_multiline_strings

    # Makes sure a library name is a valid dart identifier.
    # https://dart-lang.github.io/linter/lints/library_names.html
    - library_names

    # Follow dart style
    # https://dart-lang.github.io/linter/lints/library_prefixes.html
    - library_prefixes

    # 80 chars is considered outdated and is mostly for smaller (older) monitors. 100 or 120 is more reasonable. 
    # https://dart-lang.github.io/linter/lints/lines_longer_than_80_chars.html
    # - lines_longer_than_80_chars

    # Type check for List<T>.remove(item) where item is! T
    # The list can't contain item. Those errors are not directly obvious especially when refactoring.
    # https://dart-lang.github.io/linter/lints/list_remove_unrelated_type.html
    - list_remove_unrelated_type

    # Don't use literals as conditions, like if (true), since they never change. 
    # https://dart-lang.github.io/linter/lints/literal_only_boolean_expressions.html
    - literal_only_boolean_expressions
    # I don't want to use code like that

    # Don't forget the whitespaces at the end
    # Dart SDK: >= 2.8.0-dev.10.0 • (Linter v0.1.110)
    # https://dart-lang.github.io/linter/lints/missing_whitespace_between_adjacent_strings.html
    - missing_whitespace_between_adjacent_strings

    # Concat Strings obviously with `+` inside a list. Or use interpolation.
    # https://dart-lang.github.io/linter/lints/no_adjacent_strings_in_list.html
    - no_adjacent_strings_in_list

    # A duplicate case inside a switch is dead code which will never be reached.
    # https://dart-lang.github.io/linter/lints/no_duplicate_case_values.html
    - no_duplicate_case_values

    # Flutter only: `createState` shouldn't pass information into the state
    # https://dart-lang.github.io/linter/lints/no_logic_in_create_state.html
    - no_logic_in_create_state

    # calling `runtimeType` may be a performance problem
    # Dart SDK: >= 2.8.0-dev.10.0 • (Linter v0.1.110)
    # https://dart-lang.github.io/linter/lints/no_runtimeType_toString.html
    - no_runtimeType_toString

    # Follow dart style naming conventions
    # https://dart-lang.github.io/linter/lints/non_constant_identifier_names.html
    - non_constant_identifier_names

    # For a variable T? x, using `x!` is error-prone since x can clearly be null. 
    # Explicitly check for and handle null instead of using !
    # Dart SDK: >= 2.11.0-182.0.dev • (Linter v0.1.120)
    # https://dart-lang.github.io/linter/lints/null_check_on_nullable_type_parameter.html
    - null_check_on_nullable_type_parameter

    # Do not pass null when closures are expected. 
    # https://dart-lang.github.io/linter/lints/null_closures.html
    - null_closures

    # Types for local variables may improve readability.
    # https://dart-lang.github.io/linter/lints/omit_local_variable_types.html
    # - omit_local_variable_types

    # Defining interfaces (abstract classes) with only one method makes sense architecture wise. 
    # It allows classes to extend it which allows for future expansion.
    # https://dart-lang.github.io/linter/lints/one_member_abstracts.html
    # - one_member_abstracts

    # Only throw instances of Error or Exception, which are meant to be caught. 
    # https://dart-lang.github.io/linter/lints/only_throw_errors.html
    - only_throw_errors

    # Highlights unintentionally overridden fields.
    # https://dart-lang.github.io/linter/lints/overridden_fields.html
    - overridden_fields

    # Ensure all public APIs are documented. 
    # https://dart-lang.github.io/linter/lints/package_api_docs.html
    - package_api_docs

    # Follow dart style package naming convention
    # https://dart-lang.github.io/linter/lints/package_names.html
    - package_names

    # Seems very rare, especially for applications.
    # https://dart-lang.github.io/linter/lints/package_prefixed_library_names.html
    - package_prefixed_library_names

    # Don't overwrite a parameter. Make a new variable instead. 
    # https://dart-lang.github.io/linter/lints/parameter_assignments.html
    - parameter_assignments

    # Prefer using adjacent strings instead of + 
    # https://dart-lang.github.io/linter/lints/prefer_adjacent_string_concatenation.html
    - prefer_adjacent_string_concatenation

    # Put any assert statements in the initializer list instead of the constructor body. 
    # https://dart-lang.github.io/linter/lints/prefer_asserts_in_initializer_lists.html
    - prefer_asserts_in_initializer_lists

    # Explicitly note what is wrong in a failed assertion. 
    # https://dart-lang.github.io/linter/lints/prefer_asserts_with_message.html
    - prefer_asserts_with_message

    # Collection literals are shorter. They exists, use them.
    # https://dart-lang.github.io/linter/lints/prefer_collection_literals.html
    - prefer_collection_literals

    # Use the ??= operator when possible
    # https://dart-lang.github.io/linter/lints/prefer_conditional_assignment.html
    - prefer_conditional_assignment

    # Always use const when possible, make runtime faster
    # https://dart-lang.github.io/linter/lints/prefer_const_constructors.html
    - prefer_const_constructors

    # Add a const constructor when possible
    # https://dart-lang.github.io/linter/lints/prefer_const_constructors_in_immutables.html
    - prefer_const_constructors_in_immutables

    # final is good, const is better
    # https://dart-lang.github.io/linter/lints/prefer_const_declarations.html
    - prefer_const_declarations

    # Always use const when possible, make runtime faster
    # https://dart-lang.github.io/linter/lints/prefer_const_literals_to_create_immutables.html
    - prefer_const_literals_to_create_immutables

    # Dart has named constructors. Static methods in other languages (java) are a workaround which don't have
    # named constructors.
    # https://dart-lang.github.io/linter/lints/prefer_constructors_over_static_methods.html
    - prefer_constructors_over_static_methods

    # Prefer using Iterable.contains over Iterable.indexOf == -1
    # https://dart-lang.github.io/linter/lints/prefer_contains.html
    - prefer_contains

    # Is consistent with regular human grammar.
    # https://dart-lang.github.io/linter/lints/prefer_double_quotes.html
    - prefer_double_quotes

    # Prefer {param = defaultValue} instead of {param: defaultValue}
    # https://dart-lang.github.io/linter/lints/prefer_equal_for_default_values.html
    - prefer_equal_for_default_values

    # Prefer using arrow functions when possible. 
    # https://dart-lang.github.io/linter/lints/prefer_expression_function_bodies.html
    - prefer_expression_function_bodies

    # Avoid accidental reassignments and allows the compiler to do optimizations.
    # https://dart-lang.github.io/linter/lints/prefer_final_fields.html
    - prefer_final_fields

    # Helps avoid accidental reassignments and allows the compiler to do optimizations.
    # https://dart-lang.github.io/linter/lints/prefer_final_in_for_each.html
    - prefer_final_in_for_each

    # Helps avoid accidental reassignments and allows the compiler to do optimizations.
    # https://dart-lang.github.io/linter/lints/prefer_final_locals.html
    - prefer_final_locals

    # Use map comprehension over Map.fromIterable()
    # https://dart-lang.github.io/linter/lints/prefer_for_elements_to_map_fromIterable.html
    - prefer_for_elements_to_map_fromIterable

    # In the case where you're applying a function to every element, use forEach. 
    # Eg, myList.forEach(print) instead of a for loop
    # https://dart-lang.github.io/linter/lints/prefer_foreach.html
    - prefer_foreach

    # As Dart allows local function declarations, it is a good practice to use them in the place of function literals.
    # https://dart-lang.github.io/linter/lints/prefer_function_declarations_over_variables.html
    - prefer_function_declarations_over_variables

    # Use the new typedef syntax.
    # https://dart-lang.github.io/linter/lints/prefer_generic_function_type_aliases.html
    - prefer_generic_function_type_aliases

    # Allows potential usage of const
    # https://dart-lang.github.io/linter/lints/prefer_if_elements_to_conditional_expressions.html
    - prefer_if_elements_to_conditional_expressions

    # Prefer using ?? instead of a ternary expression.
    # https://dart-lang.github.io/linter/lints/prefer_if_null_operators.html
    - prefer_if_null_operators

    # Terser code
    # https://dart-lang.github.io/linter/lints/prefer_initializing_formals.html
    - prefer_initializing_formals

    # Prefer using list literals instead of list.add
    # https://dart-lang.github.io/linter/lints/prefer_inlined_adds.html
    - prefer_inlined_adds

    # It is more human-readable to say 5 instead of 5.0.
    # Dart's type-safety will make it obvious if an int or double is expected. 
    # https://dart-lang.github.io/linter/lints/prefer_int_literals.html
    - prefer_int_literals

    # Interpolate using $ instead of + or adjacent strings
    # https://dart-lang.github.io/linter/lints/prefer_interpolation_to_compose_strings.html
    - prefer_interpolation_to_compose_strings

    # Prefer .isEmpty over .length == 0
    # https://dart-lang.github.io/linter/lints/prefer_is_empty.html
    - prefer_is_empty

    # Prefer .isNotEmpty over !.isEmpty
    # https://dart-lang.github.io/linter/lints/prefer_is_not_empty.html
    - prefer_is_not_empty

    # Use the `foo is! Foo` instead of `!(foo is Foo)`
    # https://dart-lang.github.io/linter/lints/prefer_is_not_operator.html
    - prefer_is_not_operator

    # Prefer using Iterable.whereType instead of Iterable.where
    # https://dart-lang.github.io/linter/lints/prefer_iterable_whereType.html
    - prefer_iterable_whereType

    # Users of a 3rd party mixins can't change 3rd party code to use the new mixin syntax.
    # This makes the rule useless
    # https://dart-lang.github.io/linter/lints/prefer_mixin.html
    # - prefer_mixin

    # Makes expressions with null checks easier to read.
    # https://github.com/flutter/flutter/pull/32711#issuecomment-492930932
    - prefer_null_aware_operators

    # Conflicts with `avoid_relative_lib_imports` which is enforced
    # https://dart-lang.github.io/linter/lints/prefer_relative_imports.html
    # - prefer_relative_imports

    # Use double quotes instead. 
    # https://dart-lang.github.io/linter/lints/prefer_single_quotes.html
    # - prefer_single_quotes

    # Allows potential usage of const
    # https://dart-lang.github.io/linter/lints/prefer_spread_collections.html
    - prefer_spread_collections

    # Define types
    # https://dart-lang.github.io/linter/lints/prefer_typing_uninitialized_variables.html
    - prefer_typing_uninitialized_variables

    # Use void to signify the returned value is irrelevant
    # https://dart-lang.github.io/linter/lints/prefer_void_to_null.html
    - prefer_void_to_null

    # Document the replacement API
    # https://dart-lang.github.io/linter/lints/provide_deprecation_message.html
    - provide_deprecation_message

    # Ensures that all publicly available code is documented. 
    # https://dart-lang.github.io/linter/lints/public_member_api_docs.html
    - public_member_api_docs

    # Hints accidental recursions
    # https://dart-lang.github.io/linter/lints/recursive_getters.html
    - recursive_getters

    # Flutter only, prefer SizedBox over Container which offers a const constructors
    # Dart SDK: >= 2.9.0-4.0.dev • (Linter v0.1.115)
    # https://dart-lang.github.io/linter/lints/sized_box_for_whitespace.html
    - sized_box_for_whitespace

    # Follow dart style use triple slashes
    # https://dart-lang.github.io/linter/lints/slash_for_doc_comments.html
    - slash_for_doc_comments

    # Flutter only, always put the child argument last since it can get quite long
    # https://dart-lang.github.io/linter/lints/sort_child_properties_last.html
    - sort_child_properties_last

    # Putting field declarations first allows an overview of the class. 
    # Putting the constructor after gives the reader context as to what the parameters
    # are going to be used for. 
    # https://dart-lang.github.io/linter/lints/sort_constructors_first.html
    # - sort_constructors_first

    # It is better to sort dependencies logically than alphabetically. 
    # https://dart-lang.github.io/linter/lints/sort_pub_dependencies.html
    # - sort_pub_dependencies

    # Default constructor comes first.
    # https://dart-lang.github.io/linter/lints/sort_unnamed_constructors_first.html
    - sort_unnamed_constructors_first

    # First test, then cast
    # https://dart-lang.github.io/linter/lints/test_types_in_equals.html
    - test_types_in_equals

    # Hard to debug and bad style
    # https://dart-lang.github.io/linter/lints/throw_in_finally.html
    - throw_in_finally

    # Help the compiler at compile time with non-null asserts rather than crashing at runtime
    # Dart SDK: >= 2.11.0-182.0.dev • (Linter v0.1.120)
    # https://dart-lang.github.io/linter/lints/tighten_type_of_initializing_formals.html
    - tighten_type_of_initializing_formals

    # Type annotations make the compiler intelligent, use them
    # https://dart-lang.github.io/linter/lints/type_annotate_public_apis.html
    - type_annotate_public_apis

    # Don't add types for already typed constructor parameters.
    # https://dart-lang.github.io/linter/lints/type_init_formals.html
    - type_init_formals

    # Most of the time, be sure to `await` a Future. 
    # In some cases where the result can be ignored, use an `// ignore: ` comment for this lint.
    # https://dart-lang.github.io/linter/lints/unawaited_futures.html
    - unawaited_futures

    # Remove async/await clutter when not required
    # https://dart-lang.github.io/linter/lints/unnecessary_await_in_return.html
    - unnecessary_await_in_return

    # Remove unnecessary braces
    # https://dart-lang.github.io/linter/lints/unnecessary_brace_in_string_interps.html
    - unnecessary_brace_in_string_interps

    # Yes, const everywhere. But not in an already const scope
    # https://dart-lang.github.io/linter/lints/unnecessary_const.html
    - unnecessary_const

    # Marking a variable`final` has certain semantics and is useful.
    # https://dart-lang.github.io/linter/lints/unnecessary_final.html
    # - unnecessary_final

    # Use fields instead of getter/setter pairs when possible. 
    # https://dart-lang.github.io/linter/lints/unnecessary_getters_setters.html
    - unnecessary_getters_setters

    # Use function tear-offs instead of lambdas when possible. 
    # https://dart-lang.github.io/linter/lints/unnecessary_lambdas.html
    - unnecessary_lambdas

    # Remove the optional `new` keyword
    # https://dart-lang.github.io/linter/lints/unnecessary_new.html
    - unnecessary_new

    # Don't assign `null` when value is already `null`.
    # https://dart-lang.github.io/linter/lints/unnecessary_null_aware_assignments.html
    - unnecessary_null_aware_assignments

    # Remove ! when already non-nullable
    # Dart SDK: >= 2.10.0-144.0.dev • (Linter v0.1.119)
    # https://dart-lang.github.io/linter/lints/unnecessary_null_checks.html
    - unnecessary_null_checks

    # Don't assign `null` when value is already `null`.
    # https://dart-lang.github.io/linter/lints/unnecessary_null_in_if_null_operators.html
    - unnecessary_null_in_if_null_operators

    # If a variable doesn't change and is initialized, no need to define it as nullable (NNDB)
    # Dart SDK: >= 2.10.0-10.0.dev • (Linter v0.1.118)
    # https://dart-lang.github.io/linter/lints/unnecessary_nullable_for_final_variable_declarations.html
    - unnecessary_nullable_for_final_variable_declarations

    # Remove overrides which simply call super
    # https://dart-lang.github.io/linter/lints/unnecessary_overrides.html
    - unnecessary_overrides

    # Remove clutter where possible
    # https://dart-lang.github.io/linter/lints/unnecessary_parenthesis.html
    - unnecessary_parenthesis

    # Use raw string only when needed
    # Dart SDK: >= 2.8.0-dev.11.0 • (Linter v0.1.111)
    # https://dart-lang.github.io/linter/lints/unnecessary_raw_strings.html
    - unnecessary_raw_strings

    # Avoid a statement that is only an expression, like `1 + 1;`.
    # https://dart-lang.github.io/linter/lints/unnecessary_statements.html
    - unnecessary_statements

    # Remove unnecessary escape characters
    # Dart SDK: >= 2.8.0-dev.11.0 • (Linter v0.1.111)
    # https://dart-lang.github.io/linter/lints/unnecessary_string_escapes.html
    - unnecessary_string_escapes

    # Avoid making a string that just interpolates another string.
    # Dart SDK: >= 2.8.0-dev.10.0 • (Linter v0.1.110)
    # https://dart-lang.github.io/linter/lints/unnecessary_string_interpolations.html
    - unnecessary_string_interpolations

    # The variable is clear, remove clutter
    # https://dart-lang.github.io/linter/lints/unnecessary_this.html
    - unnecessary_this

    # Highlights potential bugs where unrelated types are compared with another. (always *not* equal).
    # https://dart-lang.github.io/linter/lints/unrelated_type_equality_checks.html
    - unrelated_type_equality_checks

    # Web only
    # https://dart-lang.github.io/linter/lints/unsafe_html.html
    - unsafe_html

    # Always use hex syntax Color(0x00000001), never Color(1)
    # https://dart-lang.github.io/linter/lints/use_full_hex_values_for_flutter_colors.html
    - use_full_hex_values_for_flutter_colors

    # Always use generic function type syntax, don't mix styles
    # https://dart-lang.github.io/linter/lints/use_function_type_syntax_for_parameters.html
    - use_function_type_syntax_for_parameters

    # Adding a key without using it isn't helpful in applications, only for the Flutter SDK
    # Dart SDK: >= 2.8.0-dev.1.0 • (Linter v0.1.108)
    # https://dart-lang.github.io/linter/lints/use_key_in_widget_constructors.html
    # - use_key_in_widget_constructors

    # Some might argue late is a code smell, this lint is very opinionated. It triggers only for private fields and
    # therefore might actually cleanup some code.
    # There is no performance impact either way https://github.com/dart-lang/linter/pull/2189#discussion_r457945301
    # Dart SDK: >= 2.10.0-10.0.dev • (Linter v0.1.118)
    # https://dart-lang.github.io/linter/lints/use_late_for_private_fields_and_variables.html
    - use_late_for_private_fields_and_variables

    # Use rethrow to preserve the original stacktrace.
    # https://dart.dev/guides/language/effective-dart/usage#do-use-rethrow-to-rethrow-a-caught-exception
    # https://dart-lang.github.io/linter/lints/use_rethrow_when_possible.html
    - use_rethrow_when_possible

    # Use the setter syntax
    # https://dart-lang.github.io/linter/lints/use_setters_to_change_properties.html
    - use_setters_to_change_properties

    # In most cases, using a string buffer is preferred for composing strings due to its improved performance.
    # https://dart-lang.github.io/linter/lints/use_string_buffers.html
    - use_string_buffers

    # Use .toX() or .asX() methods
    # https://dart-lang.github.io/linter/lints/use_to_and_as_if_applicable.html
    - use_to_and_as_if_applicable

    # Catches invalid regular expressions.
    # https://dart-lang.github.io/linter/lints/valid_regexps.html
    - valid_regexps

    # Don't assign anything to void
    # https://dart-lang.github.io/linter/lints/void_checks.html
    - void_checks