import "dart:math";

import "package:protobuf/protobuf.dart" as proto;
import "package:rover_dashboard/data.dart";

import "../generated/google/protobuf/timestamp.pb.dart";

/// A cleaner name for any message generated by Protobuf.
typedef Message = proto.GeneratedMessage;

/// A function that decodes a Protobuf messages serialized form.
/// 
/// The `.fromBuffer` constructor is a type of [MessageDecoder]. 
typedef MessageDecoder<T extends Message> = T Function(List<int> data); 

/// Defines a friendlier method for getting the name of a message.
extension MessageUtils on Message {
	/// The name of the message as declared in the .proto file. 
	String get messageName => info_.messageName;

	/// Returns a [WrappedMessage] representing this message.
	WrappedMessage get wrapped => WrappedMessage(
		name: messageName,
		data: writeToBuffer(),
		timestamp: Timestamp.fromDateTime(DateTime.now()),
	);
}

/// Decodes a wrapped Protobuf message. 
extension Unwrapper on WrappedMessage {
	/// Decodes the wrapped message into a message of type [T]. 
	T decode<T extends Message>(MessageDecoder<T> decoder) => decoder(data);
}

/// Gets a user-friendly name for a [RoverStatus].
extension HumanName on RoverStatus {
	/// Gets a user-friendly name for a [RoverStatus].
	String get humanName {
		switch (this) {
			case RoverStatus.DISCONNECTED: return "Disconnected";
			case RoverStatus.IDLE: return "Idle";
			case RoverStatus.MANUAL: return "Manual";
			case RoverStatus.AUTONOMOUS: return "Autonomous";
		}
		throw ArgumentError("Unrecognized rover status: $this");
	}
}

/// Utilities for Gps Coordinates Data
extension GpsUtils on GpsCoordinates {
  /// Calculate Euclidean distance between current coordinates and another set of coordinates
  num distanceTo(GpsCoordinates other) => pow(
    pow(latitude - other.latitude, 2) 
      + pow(longitude - other.longitude, 2) 
      + pow(altitude - other.altitude, 2), 
    0.5
  );
}
