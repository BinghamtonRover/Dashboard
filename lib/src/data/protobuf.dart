import "package:protobuf/protobuf.dart" as proto;
import "package:rover_dashboard/data.dart";

export "package:protobuf/protobuf.dart" show GeneratedMessageGenericExtensions;

/// A cleaner name for any message generated by Protobuf.
typedef Message = proto.GeneratedMessage;

/// A function that decodes a Protobuf messages serialized form.
/// 
/// The `.fromBuffer` constructor is a type of [MessageDecoder]. 
typedef MessageDecoder<T extends Message> = T Function(List<int> data); 

/// Defines a friendlier method for getting the name of a message.
extension MessageUtils on Message {
	/// The name of the message as declared in the .proto file. 
	String get messageName => info_.messageName;

	/// Returns a [WrappedMessage] representing this message.
	WrappedMessage get wrapped => WrappedMessage(
		name: messageName,
		data: writeToBuffer(),
	);
}

/// Decodes a wrapped Protobuf message. 
extension Unwrapper on WrappedMessage {
	/// Decodes the wrapped message into a message of type [T]. 
	T decode<T extends Message>(MessageDecoder<T> decoder) => decoder(data);
}

/// Gets a user-friendly name for a [RoverStatus].
extension RoverStatusHumanName on RoverStatus {
	/// Gets a user-friendly name for a [RoverStatus].
	String get humanName {
		switch (this) {
			case RoverStatus.DISCONNECTED: return "Disconnected";
			case RoverStatus.IDLE: return "Idle";
			case RoverStatus.MANUAL: return "Manual";
			case RoverStatus.AUTONOMOUS: return "Autonomous";
		}
		// Do not use default or else you'll lose exhaustiveness checking.
		throw ArgumentError("Unrecognized rover status: $this");
	}
}

/// Extensions for [Coordinates] messages.
extension CoordinatesUtils on Coordinates {
	/// Adds two coordinates.
	Coordinates operator +(Coordinates other) => 
		Coordinates(x: x + other.x, y: y + other.y, z: z + other.z);
}

/// Extensions for [CameraName] values.
extension CameraNameUtils on CameraName {
	/// Gets a user-friendly name for a [CameraName].
	String get humanName {
		switch(this) {
			case CameraName.CAMERA_NAME_UNDEFINED: return "";
			case CameraName.ROVER_FRONT: return "Rover front";
			case CameraName.ROVER_REAR: return "Rover rear";
			case CameraName.ARM_BASE: return "Arm";
			case CameraName.ARM_GRIPPER: return "Gripper";
			case CameraName.SCIENCE_CAROUSEL: return "Science";
			case CameraName.SCIENCE_MICROSCOPE: return "Microscope";
		}
		// Do not use default or else you'll lose exhaustiveness checking.
		throw ArgumentError("Unrecognized rover status: $this");
	}
}

/// Extensions for [VideoData].
extension VideoDataUtils on VideoData {
	/// Whether this data has a frame to show.
	/// 
	/// A Protobuf `bytes` object is never null, only empty.
	bool get hasFrame => frame.isNotEmpty;
}

/// Extensions for [CameraStatus] values.
extension CameraStatusUtils on CameraStatus {
	/// Gets a user-friendly name for a [CameraStatus].
	String get humanName {
		switch(this) {
			case CameraStatus.CAMERA_STATUS_UNDEFINED: return "";
			case CameraStatus.CAMERA_DISCONNECTED: return "Disconnected";
			case CameraStatus.CAMERA_ENABLED: return "Enabled";
			case CameraStatus.CAMERA_DISABLED: return "Disabled";
			case CameraStatus.CAMERA_NOT_RESPONDING: return "Not responding";
			case CameraStatus.CAMERA_LOADING: return "Loading";
			case CameraStatus.FRAME_TOO_LARGE: return "Frame too large";
		}
		// Do not use default or else you'll lose exhaustiveness checking.
		throw ArgumentError("Unrecognized rover status: $this");
	}
}