name: Analyze & Build Dashboard

# Builds a Windows App Installer (.msix) for the Dashboard
#
# To use this action, add your Windows Certificate file, in base64 format, to a
# repository secret called WINDOWS_CERTIFICATE. This action then:
# - Installs Flutter and clones your repository
# - Decodes your text certificate into a binary .pfx file
# - Runs flutter pub run msix:create to build and sign your Flutter app
# - Creates a new release and uploads the generated .msix file to it

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  FLUTTER_VERSION: 3.29.3

jobs:
  analyze:
    runs-on: ubuntu-22.04

    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-path: ${{ runner.tool_cache }}/flutter/linux

      - name: Analyze
        run: flutter analyze --dartdocs

  # build-android:
  #   name: Build Android APK
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v4

  #     - name: Setup Java
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: "zulu"
  #         java-version: '17'

  #     - name: Install Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         cache: true
  #         cache-key: "flutter-ubuntu"  # we don't need *the* most recent build

  #     - name: Build APK
  #       run: flutter build apk

  #     - name: Upload APK
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dashboard_android
  #         path: build/app/outputs/apk/release/app-release.apk

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-path: ${{ runner.tool_cache }}/flutter/windows

      - name: Flutter Doctor
        run: flutter doctor

      - name: Install packages
        run: flutter pub get

      - name: Build windows dashboard
        run: flutter build windows

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: dashboard_windows_portable
          path: build/windows/x64/runner/Release/

  build-msix:
    name: Build Windows MSIX
    runs-on: windows-latest
    env:
      windows_certificate: ${{ secrets.WINDOWS_CERTIFICATE }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Load certificate
        run: |
          echo "${{ env.windows_certificate }}" > windows_certificate_decoded.txt
          openssl enc -base64 -d -in windows_certificate_decoded.txt -out windows_certificate.pfx

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-path: ${{ runner.tool_cache }}/flutter/windows

      - name: Flutter Doctor
        run: flutter doctor

      - name: Build MSIX
        run: |
          flutter pub get
          dart run msix:create

      - name: Upload MSIX
        uses: actions/upload-artifact@v4
        with:
          name: dashboard_msix
          path: build/windows/x64/runner/Release/dashboard.msix

      - name: Upload MSIX
        uses: actions/upload-artifact@v4
        with:
          name: trust_msix
          path: windows/trust_windows.bat

  build-macos:
    name: Build MacOS DMG
    runs-on: macos-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          cache-path: ${{ runner.tool_cache }}/flutter/macos

      - name: Check on Flutter
        run: flutter doctor -v

      - name: Install build dependencies
        run: brew install automake libtool

      - name: Build MacOS
        run: flutter build macos

      - name: Create macOS DMG
        uses: L-Super/create-dmg-actions@v1.0.3
        with:
          dmg_name: dashboard_setup_macos
          src_dir: build/macos/Build/Products/Release/rover_control_dashboard.app

      - name: Upload DMG
        uses: actions/upload-artifact@v4
        with:
          name: dashboard_setup_macos
          path: dashboard_setup_macos.dmg
